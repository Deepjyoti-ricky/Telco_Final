-- =====================================================
-- Telco Network Optimization Suite - Sample Data
-- =====================================================
-- This script populates tables with sample data for testing

USE DATABASE TELCO_NETWORK_OPTIMIZATION_PROD;
USE SCHEMA RAW;

-- =====================================================
-- 1. POPULATE CELL TOWERS
-- =====================================================

INSERT INTO CELL_TOWERS (
    CELL_TOWER_ID, LATITUDE, LONGITUDE, FAILURE_RATE, 
    SIGNAL_STRENGTH, COVERAGE_RADIUS, STATUS, REGION,
    LAST_MAINTENANCE_DATE, INSTALLATION_DATE, TOWER_HEIGHT, EQUIPMENT_TYPE
)
SELECT
    'CT-' || LPAD(SEQ4(), 4, '0') AS CELL_TOWER_ID,
    37.7749 + (UNIFORM(-0.15, 0.15, RANDOM()) ) AS LATITUDE,
    -122.4194 + (UNIFORM(-0.15, 0.15, RANDOM())) AS LONGITUDE,
    UNIFORM(0.001, 0.08, RANDOM()) AS FAILURE_RATE,
    UNIFORM(-100, -50, RANDOM()) AS SIGNAL_STRENGTH,
    UNIFORM(0.5, 3.0, RANDOM()) AS COVERAGE_RADIUS,
    CASE 
        WHEN UNIFORM(0, 1, RANDOM()) < 0.7 THEN 'Operational'
        WHEN UNIFORM(0, 1, RANDOM()) < 0.9 THEN 'Warning'
        ELSE 'Critical'
    END AS STATUS,
    CASE 
        WHEN UNIFORM(0, 1, RANDOM()) < 0.2 THEN 'North'
        WHEN UNIFORM(0, 1, RANDOM()) < 0.4 THEN 'South'
        WHEN UNIFORM(0, 1, RANDOM()) < 0.6 THEN 'East'
        WHEN UNIFORM(0, 1, RANDOM()) < 0.8 THEN 'West'
        ELSE 'Central'
    END AS REGION,
    DATEADD(day, -UNIFORM(1, 60, RANDOM()), CURRENT_TIMESTAMP()) AS LAST_MAINTENANCE_DATE,
    DATEADD(year, -UNIFORM(1, 10, RANDOM()), CURRENT_TIMESTAMP()) AS INSTALLATION_DATE,
    UNIFORM(20, 50, RANDOM()) AS TOWER_HEIGHT,
    CASE 
        WHEN UNIFORM(0, 1, RANDOM()) < 0.5 THEN '4G LTE'
        ELSE '5G'
    END AS EQUIPMENT_TYPE
FROM TABLE(GENERATOR(ROWCOUNT => 200));

-- =====================================================
-- 2. POPULATE CUSTOMERS
-- =====================================================

INSERT INTO CUSTOMERS (
    CUSTOMER_ID, CUSTOMER_NAME, EMAIL, PHONE,
    ADDRESS, LATITUDE, LONGITUDE, SERVICE_PLAN,
    SIGNUP_DATE, STATUS
)
SELECT
    'CUST-' || LPAD(SEQ4(), 6, '0') AS CUSTOMER_ID,
    'Customer ' || SEQ4() AS CUSTOMER_NAME,
    'customer' || SEQ4() || '@example.com' AS EMAIL,
    '+1-555-' || LPAD(UNIFORM(1000000, 9999999, RANDOM()), 7, '0') AS PHONE,
    SEQ4() || ' Main Street, San Francisco, CA' AS ADDRESS,
    37.7749 + (UNIFORM(-0.15, 0.15, RANDOM())) AS LATITUDE,
    -122.4194 + (UNIFORM(-0.15, 0.15, RANDOM())) AS LONGITUDE,
    CASE 
        WHEN UNIFORM(0, 1, RANDOM()) < 0.3 THEN 'Basic'
        WHEN UNIFORM(0, 1, RANDOM()) < 0.6 THEN 'Standard'
        ELSE 'Premium'
    END AS SERVICE_PLAN,
    DATEADD(month, -UNIFORM(1, 36, RANDOM()), CURRENT_TIMESTAMP()) AS SIGNUP_DATE,
    CASE 
        WHEN UNIFORM(0, 1, RANDOM()) < 0.9 THEN 'ACTIVE'
        ELSE 'SUSPENDED'
    END AS STATUS
FROM TABLE(GENERATOR(ROWCOUNT => 1000));

-- =====================================================
-- 3. POPULATE SUPPORT TICKETS
-- =====================================================

INSERT INTO SUPPORT_TICKETS (
    TICKET_ID, CUSTOMER_ID, CELL_TOWER_ID, TICKET_DATE,
    ISSUE_TYPE, ISSUE_DESCRIPTION, STATUS, PRIORITY,
    SENTIMENT_SCORE, RESOLUTION_DATE, RESPONSE_TIME_HOURS,
    LATITUDE, LONGITUDE
)
SELECT
    'TKT-' || LPAD(SEQ4(), 6, '0') AS TICKET_ID,
    (SELECT CUSTOMER_ID FROM CUSTOMERS ORDER BY RANDOM() LIMIT 1) AS CUSTOMER_ID,
    (SELECT CELL_TOWER_ID FROM CELL_TOWERS ORDER BY RANDOM() LIMIT 1) AS CELL_TOWER_ID,
    DATEADD(day, -UNIFORM(1, 90, RANDOM()), CURRENT_TIMESTAMP()) AS TICKET_DATE,
    CASE 
        WHEN UNIFORM(0, 1, RANDOM()) < 0.25 THEN 'No Signal'
        WHEN UNIFORM(0, 1, RANDOM()) < 0.5 THEN 'Slow Internet'
        WHEN UNIFORM(0, 1, RANDOM()) < 0.75 THEN 'Dropped Calls'
        ELSE 'Billing Issue'
    END AS ISSUE_TYPE,
    'Customer reported connectivity issues in their area' AS ISSUE_DESCRIPTION,
    CASE 
        WHEN UNIFORM(0, 1, RANDOM()) < 0.3 THEN 'OPEN'
        WHEN UNIFORM(0, 1, RANDOM()) < 0.5 THEN 'IN_PROGRESS'
        WHEN UNIFORM(0, 1, RANDOM()) < 0.9 THEN 'RESOLVED'
        ELSE 'CLOSED'
    END AS STATUS,
    CASE 
        WHEN UNIFORM(0, 1, RANDOM()) < 0.2 THEN 'CRITICAL'
        WHEN UNIFORM(0, 1, RANDOM()) < 0.4 THEN 'HIGH'
        WHEN UNIFORM(0, 1, RANDOM()) < 0.7 THEN 'MEDIUM'
        ELSE 'LOW'
    END AS PRIORITY,
    UNIFORM(1.0, 5.0, RANDOM()) AS SENTIMENT_SCORE,
    CASE 
        WHEN UNIFORM(0, 1, RANDOM()) < 0.7 
        THEN DATEADD(hour, UNIFORM(1, 48, RANDOM()), DATEADD(day, -UNIFORM(1, 90, RANDOM()), CURRENT_TIMESTAMP()))
        ELSE NULL
    END AS RESOLUTION_DATE,
    UNIFORM(0.5, 72.0, RANDOM()) AS RESPONSE_TIME_HOURS,
    37.7749 + (UNIFORM(-0.15, 0.15, RANDOM())) AS LATITUDE,
    -122.4194 + (UNIFORM(-0.15, 0.15, RANDOM())) AS LONGITUDE
FROM TABLE(GENERATOR(ROWCOUNT => 5000));

-- =====================================================
-- 4. POPULATE NETWORK METRICS
-- =====================================================

INSERT INTO NETWORK_METRICS (
    METRIC_ID, CELL_TOWER_ID, METRIC_DATE,
    FAILURE_RATE, SIGNAL_STRENGTH, DATA_THROUGHPUT,
    LATENCY_MS, PACKET_LOSS_RATE, ACTIVE_CONNECTIONS,
    BANDWIDTH_UTILIZATION
)
SELECT
    'MET-' || LPAD(SEQ8(), 8, '0') AS METRIC_ID,
    ct.CELL_TOWER_ID,
    DATEADD(hour, -seq.seq_val, CURRENT_TIMESTAMP()) AS METRIC_DATE,
    UNIFORM(0.001, 0.1, RANDOM()) AS FAILURE_RATE,
    UNIFORM(-100, -50, RANDOM()) AS SIGNAL_STRENGTH,
    UNIFORM(10, 1000, RANDOM()) AS DATA_THROUGHPUT,
    UNIFORM(10, 100, RANDOM()) AS LATENCY_MS,
    UNIFORM(0.001, 0.05, RANDOM()) AS PACKET_LOSS_RATE,
    UNIFORM(10, 500, RANDOM()) AS ACTIVE_CONNECTIONS,
    UNIFORM(0.2, 0.9, RANDOM()) AS BANDWIDTH_UTILIZATION
FROM CELL_TOWERS ct
CROSS JOIN (SELECT SEQ4() as seq_val FROM TABLE(GENERATOR(ROWCOUNT => 72))) seq
LIMIT 50000;

-- =====================================================
-- 5. POPULATE MAINTENANCE SCHEDULE
-- =====================================================

INSERT INTO MAINTENANCE_SCHEDULE (
    MAINTENANCE_ID, CELL_TOWER_ID, SCHEDULED_DATE,
    COMPLETED_DATE, MAINTENANCE_TYPE, TECHNICIAN_ID,
    STATUS, NOTES, COST
)
SELECT
    'MAINT-' || LPAD(SEQ4(), 5, '0') AS MAINTENANCE_ID,
    (SELECT CELL_TOWER_ID FROM CELL_TOWERS ORDER BY RANDOM() LIMIT 1) AS CELL_TOWER_ID,
    DATEADD(day, UNIFORM(-30, 60, RANDOM()), CURRENT_TIMESTAMP()) AS SCHEDULED_DATE,
    CASE 
        WHEN UNIFORM(0, 1, RANDOM()) < 0.6 
        THEN DATEADD(day, UNIFORM(-30, 0, RANDOM()), CURRENT_TIMESTAMP())
        ELSE NULL
    END AS COMPLETED_DATE,
    CASE 
        WHEN UNIFORM(0, 1, RANDOM()) < 0.25 THEN 'Routine Inspection'
        WHEN UNIFORM(0, 1, RANDOM()) < 0.5 THEN 'Equipment Upgrade'
        WHEN UNIFORM(0, 1, RANDOM()) < 0.75 THEN 'Repair'
        ELSE 'Emergency Maintenance'
    END AS MAINTENANCE_TYPE,
    'TECH-' || LPAD(UNIFORM(1, 20, RANDOM()), 3, '0') AS TECHNICIAN_ID,
    CASE 
        WHEN UNIFORM(0, 1, RANDOM()) < 0.4 THEN 'COMPLETED'
        WHEN UNIFORM(0, 1, RANDOM()) < 0.7 THEN 'SCHEDULED'
        WHEN UNIFORM(0, 1, RANDOM()) < 0.9 THEN 'IN_PROGRESS'
        ELSE 'CANCELLED'
    END AS STATUS,
    'Standard maintenance procedure' AS NOTES,
    UNIFORM(500, 5000, RANDOM()) AS COST
FROM TABLE(GENERATOR(ROWCOUNT => 500));

-- =====================================================
-- VERIFICATION QUERIES
-- =====================================================

-- Check row counts
SELECT 'CELL_TOWERS' as TABLE_NAME, COUNT(*) as ROW_COUNT FROM CELL_TOWERS
UNION ALL
SELECT 'CUSTOMERS' as TABLE_NAME, COUNT(*) as ROW_COUNT FROM CUSTOMERS
UNION ALL
SELECT 'SUPPORT_TICKETS' as TABLE_NAME, COUNT(*) as ROW_COUNT FROM SUPPORT_TICKETS
UNION ALL
SELECT 'NETWORK_METRICS' as TABLE_NAME, COUNT(*) as ROW_COUNT FROM NETWORK_METRICS
UNION ALL
SELECT 'MAINTENANCE_SCHEDULE' as TABLE_NAME, COUNT(*) as ROW_COUNT FROM MAINTENANCE_SCHEDULE;

-- Sample queries to verify data
SELECT * FROM CELL_TOWERS LIMIT 10;
SELECT * FROM SUPPORT_TICKETS LIMIT 10;
SELECT * FROM NETWORK_METRICS LIMIT 10;

